config docker compose local:
services:
  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    env_file:
      - ./api-gateway/.env
    depends_on:
      user-service: 
        condition: service_started
      chat-service: 
        condition: service_started
      notification-service: 
        condition: service_started
    restart: always
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
      - /app/dist
    networks:
      - app-network
  user-service:
    container_name: user-service
    build:
      context: ./services/user
      dockerfile: Dockerfile
    ports:
      - "4001:4001"
    restart: always
    volumes:
      - ./services/user:/app
      - /app/node_modules
      - /app/dist
    env_file:
      - ./services/user/.env
    depends_on:
      postgres_db: 
         condition: service_healthy
    networks:
      - app-network
  notification-service:
    container_name: notification-service
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    ports:
      - "4002:4002"
    env_file:
      - ./services/notification/.env
    depends_on:
      postgres_db: 
         condition: service_healthy
      redis: 
         condition: service_started
    restart: always
    volumes:
      - ./services/notification:/app
      - /app/node_modules
      - /app/dist
    networks:
      - app-network
  chat-service:
    container_name: chat-service
    build:
      context: ./services/chat
      dockerfile: Dockerfile
    ports:
      - "4003:4003"
    env_file:
      - ./services/chat/.env
    depends_on:
      mongo_db: 
         condition: service_started
      redis: 
         condition: service_started
    restart: always
    volumes:
      - ./services/chat:/app
      - /app/node_modules
      - /app/dist
    networks:
      - app-network
  postgres_db:
    image: postgres:17.2
    container_name: postgres_db
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready","-U","root"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./environments/postgres/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres.sql:/docker-entrypoint-initdb.d/postgres.sql
      - /app/dist
    networks:
      - app-network
  pg_admin:
    image: dpage/pgadmin4
    container_name: pg_admin
    restart: always
    env_file:
      - ./environments/postgres/admin/.env
    ports:
      - "5050:80"
    depends_on:
      postgres_db: 
        condition: service_healthy
    networks:
      - app-network
  mongo_db:
    image: mongo:8.0.4
    container_name: mongo_db
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./environments/mongo/.env
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./database/mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app-network
  mongo_express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    depends_on:
      mongo_db: 
        condition: service_healthy
    env_file: 
      - ./environments/mongo/express/.env
    ports:
      - "8081:8081"
    networks:
      - app-network
  redis:
    image: redis:7.4.2
    container_name: redis
    restart: always
    env_file:
      - ./environments/redis/.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - "6379:6379"
    networks:
      - app-network
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    build: .
    restart: always
    env_file:
      - ./environments/redis/commander/.env
    ports:
    - 8082:8081
    networks:
      - app-network
  kafka: 
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file: 
      - ./environments/kafka/.env
    ports:
      - "9092:9092"
    networks:
      - app-network
  rabbitmq: 
    image: rabbitmq:4.0.5
    container_name: rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - ./environments/rabbitmq/.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
volumes:
  postgres_data:
  mongo_data:
  rabbitmq_data:
